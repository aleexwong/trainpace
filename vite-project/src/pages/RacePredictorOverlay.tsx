import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { X, Copy, Download, ChevronDown, ChevronUp } from "lucide-react";
import ReactGA from "react-ga4";
import { toast } from "@/hooks/use-toast";

interface RacePredictorOverlayProps {
  isOpen: boolean;
  onClose: () => void;
}

const RACE_DISTANCES = [
  { label: "5K", value: 5 },
  { label: "10K", value: 10 },
  { label: "Half", value: 21.0975 },
  { label: "Marathon", value: 42.195 },
];

// Quick presets for common race distances
const RECENT_RACE_PRESETS = [
  { label: "5K", distance: 5, avgTime: { hours: 0, minutes: 25 } },
  { label: "10K", distance: 10, avgTime: { hours: 0, minutes: 50 } },
  { label: "Half", distance: 21.0975, avgTime: { hours: 1, minutes: 45 } },
];

const predictRaceTime = (
  knownDistance: number,
  knownTime: number,
  targetDistance: number
): { hours: number; minutes: number; seconds: number; formatted: string } => {
  const exponent = 1.06;
  const predictedTime =
    knownTime * Math.pow(targetDistance / knownDistance, exponent);
  const hours = Math.floor(predictedTime / 60);
  const minutes = Math.floor(predictedTime % 60);
  const seconds = Math.round((predictedTime * 60) % 60);
  const formatted = `${hours}h ${minutes}m ${seconds}s`;
  return { hours, minutes, seconds, formatted };
};

const formatPacePerKm = (totalMinutes: number, distanceKm: number): string => {
  const paceMinPerKm = totalMinutes / distanceKm;
  const paceMin = Math.floor(paceMinPerKm);
  const paceSec = Math.round((paceMinPerKm - paceMin) * 60);
  return `${paceMin}:${paceSec.toString().padStart(2, "0")} /km`;
};

const RacePredictorOverlay: React.FC<RacePredictorOverlayProps> = ({
  isOpen,
  onClose,
}) => {
  const [knownDistance, setKnownDistance] = useState<string>("");
  const [knownTimeHours, setKnownTimeHours] = useState<string>("");
  const [knownTimeMinutes, setKnownTimeMinutes] = useState<string>("");
  const [targetDistance, setTargetDistance] = useState<string>("");
  const [result, setResult] = useState<{
    time: string;
    hours: number;
    minutes: number;
    seconds: number;
    pace: string;
    targetLabel: string;
    inputPace: string;
    inputDistance: number;
    inputTimeHours: number;
    inputTimeMinutes: number;
  } | null>(null);
  const [showMethodology, setShowMethodology] = useState(false);

  const handlePresetSelect = (preset: (typeof RECENT_RACE_PRESETS)[0]) => {
    setKnownDistance(preset.distance.toString());
    setKnownTimeHours(preset.avgTime.hours.toString());
    setKnownTimeMinutes(preset.avgTime.minutes.toString());
  };

  const handlePrediction = () => {
    const d = parseFloat(knownDistance);
    const hours = parseFloat(knownTimeHours) || 0;
    const mins = parseFloat(knownTimeMinutes) || 0;
    const totalMinutes = hours * 60 + mins;
    const target = parseFloat(targetDistance);

    if (isNaN(d) || d <= 0) {
      toast({
        title: "Invalid distance",
        description: "Please enter a valid race distance.",
        variant: "destructive",
      });
      return;
    }

    if (totalMinutes <= 0) {
      toast({
        title: "Invalid time",
        description: "Please enter a valid race time.",
        variant: "destructive",
      });
      return;
    }

    if (isNaN(target) || target <= 0) {
      toast({
        title: "Invalid target",
        description: "Please select a target race distance.",
        variant: "destructive",
      });
      return;
    }

    const prediction = predictRaceTime(d, totalMinutes, target);
    const pace = formatPacePerKm(
      prediction.hours * 60 + prediction.minutes,
      target
    );
    const inputPace = formatPacePerKm(totalMinutes, d);
    const selectedLabel =
      RACE_DISTANCES.find((r) => r.value.toString() === targetDistance)
        ?.label || `${target}km`;

    setResult({
      time: prediction.formatted,
      hours: prediction.hours,
      minutes: prediction.minutes,
      seconds: prediction.seconds,
      pace,
      targetLabel: selectedLabel,
      inputPace,
      inputDistance: d,
      inputTimeHours: hours,
      inputTimeMinutes: mins,
    });

    // Track usage in Google Analytics
    ReactGA.event({
      category: "Race Predictor",
      action: "Predicted Race Time",
      label: `From ${d}km in ${totalMinutes}min → to ${target}km`,
    });
  };

  const handleCopy = async () => {
    if (!result) return;

    const text = `Race Time Prediction

Target Race: ${result.targetLabel}
Predicted Time: ${result.time}
Predicted Pace: ${result.pace}

Based on ${result.inputDistance}km in ${result.inputTimeHours}h ${result.inputTimeMinutes}m (${result.inputPace} pace)

Generated by TrainPace Race Predictor`;

    try {
      await navigator.clipboard.writeText(text);
      toast({ title: "Copied to clipboard!" });

      ReactGA.event({
        category: "Race Predictor",
        action: "Copied Prediction",
        label: result.targetLabel,
      });
    } catch {
      toast({
        title: "Failed to copy",
        variant: "destructive",
      });
    }
  };

  const handleDownload = () => {
    if (!result) return;

    const text = `Race Time Prediction

Target Race: ${result.targetLabel}
Predicted Time: ${result.time}
Predicted Pace: ${result.pace}

Based on ${result.inputDistance}km in ${result.inputTimeHours}h ${result.inputTimeMinutes}m (${result.inputPace} pace)

Based on Riegel's formula
Generated by TrainPace Race Predictor`;

    const blob = new Blob([text], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `race-prediction-${result.targetLabel
      .toLowerCase()
      .replace(" ", "-")}.txt`;
    a.click();
    URL.revokeObjectURL(url);

    toast({ title: "Download started!" });

    ReactGA.event({
      category: "Race Predictor",
      action: "Downloaded Prediction",
      label: result.targetLabel,
    });
  };

  const resetForm = () => {
    setKnownDistance("");
    setKnownTimeHours("");
    setKnownTimeMinutes("");
    setTargetDistance("");
    setResult(null);
    setShowMethodology(false);
    onClose();
  };

  const handleEditPrediction = () => {
    setResult(null);
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
      onClick={onClose}
    >
      <div
        className="w-full max-w-lg bg-white rounded-2xl shadow-2xl max-h-[90vh] overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Compact Header */}
        <div className="sticky top-0 bg-gradient-to-r from-blue-50 to-purple-50 border-b border-gray-200 px-6 py-4 rounded-t-2xl flex items-start justify-between">
          <div>
            <h2 className="text-xl font-bold text-gray-900 mt-1">
              🔮 Race Predictor
            </h2>
          </div>
          <Button
            aria-label="Close"
            onClick={resetForm}
            className="p-2 hover:bg-red-500 rounded-full"
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        <div className="p-6 space-y-4">
          {!result ? (
            /* Compact Input Form */
            <>
              {/* Quick Presets - Inline Pills */}
              <div className="flex items-center gap-2 flex-wrap">
                <span className="text-xs font-medium text-gray-600">
                  Quick:
                </span>
                {RECENT_RACE_PRESETS.map((preset) => (
                  <button
                    key={preset.label}
                    onClick={() => handlePresetSelect(preset)}
                    className="px-3 py-1 text-xs font-medium bg-blue-50 text-blue-700 hover:bg-blue-100 rounded-full transition-all"
                  >
                    {preset.label}
                  </button>
                ))}
              </div>

              {/* Compact Form */}
              <div className="space-y-3">
                {/* Recent Race - Single Row */}
                <div>
                  <label className="block text-xs font-semibold text-gray-700 mb-1.5">
                    Recent Race
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    <Input
                      type="number"
                      inputMode="decimal"
                      placeholder="5"
                      value={knownDistance}
                      onChange={(e) => setKnownDistance(e.target.value)}
                      className="text-base px-3 py-2"
                    />
                    <div className="relative">
                      <Input
                        type="number"
                        inputMode="numeric"
                        placeholder="0"
                        value={knownTimeHours}
                        onChange={(e) => setKnownTimeHours(e.target.value)}
                        className="text-base px-3 py-2 pr-6"
                        min={0}
                        max={12}
                      />
                      <span className="absolute right-2 top-1/2 -translate-y-1/2 text-xs font-medium text-gray-500">
                        h
                      </span>
                    </div>
                    <div className="relative">
                      <Input
                        type="number"
                        inputMode="numeric"
                        placeholder="45"
                        value={knownTimeMinutes}
                        onChange={(e) => setKnownTimeMinutes(e.target.value)}
                        className="text-base px-3 py-2 pr-6"
                        min={0}
                        max={59}
                      />
                      <span className="absolute right-2 top-1/2 -translate-y-1/2 text-xs font-medium text-gray-500">
                        m
                      </span>
                    </div>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Distance (km) · Hours · Minutes
                  </p>
                </div>

                {/* Target Distance - Compact Pills */}
                <div>
                  <label className="block text-xs font-semibold text-gray-700 mb-1.5">
                    Target Race
                  </label>
                  <div className="grid grid-cols-4 gap-2">
                    {RACE_DISTANCES.map((race) => (
                      <button
                        key={race.value}
                        onClick={() => setTargetDistance(race.value.toString())}
                        className={`py-2.5 px-2 text-xs font-semibold rounded-lg transition-all ${
                          targetDistance === race.value.toString()
                            ? "bg-blue-600 text-white shadow-md"
                            : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                        }`}
                      >
                        {race.label}
                      </button>
                    ))}
                  </div>
                </div>

                <Button
                  onClick={handlePrediction}
                  disabled={
                    !knownDistance ||
                    (!knownTimeHours && !knownTimeMinutes) ||
                    !targetDistance
                  }
                  className="w-full py-3 text-base font-semibold bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg shadow-md disabled:opacity-50"
                >
                  🧠 Predict Time
                </Button>
              </div>
            </>
          ) : (
            /* Compact Results */
            <>
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-bold text-gray-900">
                  Your Prediction
                </h3>
                <div className="flex gap-2">
                  <button
                    onClick={handleEditPrediction}
                    className="px-3 py-1 text-xs font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
                  >
                    Edit
                  </button>
                  <button
                    onClick={handleCopy}
                    className="p-2 rounded-md bg-blue-50 hover:bg-blue-100 transition-colors"
                    title="Copy"
                  >
                    <Copy className="h-4 w-4 text-blue-600" />
                  </button>
                  <button
                    onClick={handleDownload}
                    className="p-2 rounded-md bg-blue-50 hover:bg-blue-100 transition-colors"
                    title="Download"
                  >
                    <Download className="h-4 w-4 text-blue-600" />
                  </button>
                </div>
              </div>

              {/* Compact Input Summary */}
              <div className="bg-gray-50 rounded-lg px-3 py-2 border border-gray-200">
                <div className="flex items-center justify-between text-xs">
                  <span className="text-gray-600">
                    {result.inputDistance}km in {result.inputTimeHours}h{" "}
                    {result.inputTimeMinutes}m
                  </span>
                  <span className="text-blue-600 font-semibold">
                    {result.inputPace}
                  </span>
                </div>
              </div>

              {/* Compact Result Metrics */}
              <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg p-4">
                <div className="text-center mb-3">
                  <p className="text-xs font-medium text-gray-600 mb-0.5">
                    Predicted for
                  </p>
                  <p className="text-2xl font-bold text-blue-700">
                    {result.targetLabel}
                  </p>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-white rounded-lg p-3 text-center shadow-sm">
                    <div className="text-2xl font-bold text-blue-700">
                      {result.time}
                    </div>
                    <div className="text-xs text-gray-600 mt-0.5">Time</div>
                  </div>

                  <div className="bg-white rounded-lg p-3 text-center shadow-sm">
                    <div className="text-2xl font-bold text-blue-700">
                      {result.pace}
                    </div>
                    <div className="text-xs text-gray-600 mt-0.5">Pace</div>
                  </div>
                </div>
              </div>

              {/* Compact Disclaimer */}
              <div className="px-3 py-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                <p className="text-xs text-yellow-800">
                  <strong>⚠️</strong> Based on Riegel's formula. Actual results
                  vary with training, course, and conditions.
                </p>
              </div>
            </>
          )}

          {/* Compact Methodology */}
          <div className="pt-2">
            <button
              onClick={() => setShowMethodology(!showMethodology)}
              className="w-full flex items-center justify-between px-3 py-2 bg-gray-50 rounded-lg hover:bg-gray-100 transition-all"
            >
              <span className="text-xs font-semibold text-gray-900">
                How does this work?
              </span>
              {showMethodology ? (
                <ChevronUp className="h-4 w-4 text-gray-600" />
              ) : (
                <ChevronDown className="h-4 w-4 text-gray-600" />
              )}
            </button>

            {showMethodology && (
              <div className="mt-2 bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-2 text-xs text-gray-700">
                <p className="font-semibold text-gray-900">Riegel's Formula</p>
                <p className="bg-white p-2 rounded font-mono border border-gray-200">
                  T₂ = T₁ × (D₂ / D₁)^1.06
                </p>
                <ul className="list-disc list-inside space-y-1 ml-1">
                  <li>T₁ = Your known race time</li>
                  <li>D₁ = Your known race distance</li>
                  <li>T₂ = Predicted race time</li>
                  <li>D₂ = Target race distance</li>
                  <li>1.06 = Fatigue factor</li>
                </ul>
                <p>
                  <strong>Best when:</strong> Recent race at max effort, similar
                  training, and comparable conditions.
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default RacePredictorOverlay;
